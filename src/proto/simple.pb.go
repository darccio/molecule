// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: simple.proto

/*
	Package simple is a generated protocol buffer package.

	It is generated from these files:
		simple.proto

	It has these top-level messages:
		Simple
*/
package simple

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Simple struct {
	Double              float64 `protobuf:"fixed64,1,opt,name=double,proto3" json:"double,omitempty"`
	Float               float32 `protobuf:"fixed32,2,opt,name=float,proto3" json:"float,omitempty"`
	Int32               int32   `protobuf:"varint,3,opt,name=int32,proto3" json:"int32,omitempty"`
	Int64               int64   `protobuf:"varint,4,opt,name=int64,proto3" json:"int64,omitempty"`
	Uint32              uint32  `protobuf:"varint,5,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Uint64              uint64  `protobuf:"varint,6,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Sint32              int32   `protobuf:"zigzag32,7,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sint64              int64   `protobuf:"zigzag64,8,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Fixed32             uint32  `protobuf:"fixed32,9,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Fixed64             uint64  `protobuf:"fixed64,10,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Sfixed32            int32   `protobuf:"fixed32,11,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Sfixed64            int64   `protobuf:"fixed64,12,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	Bool                bool    `protobuf:"varint,13,opt,name=bool,proto3" json:"bool,omitempty"`
	String_             string  `protobuf:"bytes,14,opt,name=string,proto3" json:"string,omitempty"`
	Bytes               []byte  `protobuf:"bytes,15,opt,name=bytes,proto3" json:"bytes,omitempty"`
	RepeatedInt64Packed []int64 `protobuf:"varint,16,rep,packed,name=repeated_int64_packed,json=repeatedInt64Packed" json:"repeated_int64_packed,omitempty"`
}

func (m *Simple) Reset()                    { *m = Simple{} }
func (m *Simple) String() string            { return proto.CompactTextString(m) }
func (*Simple) ProtoMessage()               {}
func (*Simple) Descriptor() ([]byte, []int) { return fileDescriptorSimple, []int{0} }

func (m *Simple) GetDouble() float64 {
	if m != nil {
		return m.Double
	}
	return 0
}

func (m *Simple) GetFloat() float32 {
	if m != nil {
		return m.Float
	}
	return 0
}

func (m *Simple) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

func (m *Simple) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *Simple) GetUint32() uint32 {
	if m != nil {
		return m.Uint32
	}
	return 0
}

func (m *Simple) GetUint64() uint64 {
	if m != nil {
		return m.Uint64
	}
	return 0
}

func (m *Simple) GetSint32() int32 {
	if m != nil {
		return m.Sint32
	}
	return 0
}

func (m *Simple) GetSint64() int64 {
	if m != nil {
		return m.Sint64
	}
	return 0
}

func (m *Simple) GetFixed32() uint32 {
	if m != nil {
		return m.Fixed32
	}
	return 0
}

func (m *Simple) GetFixed64() uint64 {
	if m != nil {
		return m.Fixed64
	}
	return 0
}

func (m *Simple) GetSfixed32() int32 {
	if m != nil {
		return m.Sfixed32
	}
	return 0
}

func (m *Simple) GetSfixed64() int64 {
	if m != nil {
		return m.Sfixed64
	}
	return 0
}

func (m *Simple) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *Simple) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *Simple) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *Simple) GetRepeatedInt64Packed() []int64 {
	if m != nil {
		return m.RepeatedInt64Packed
	}
	return nil
}

func init() {
	proto.RegisterType((*Simple)(nil), "simple.Simple")
}
func (m *Simple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Simple) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Double != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Simple(dAtA, i, uint64(math.Float64bits(float64(m.Double))))
	}
	if m.Float != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Simple(dAtA, i, uint32(math.Float32bits(float32(m.Float))))
	}
	if m.Int32 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSimple(dAtA, i, uint64(m.Int32))
	}
	if m.Int64 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSimple(dAtA, i, uint64(m.Int64))
	}
	if m.Uint32 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSimple(dAtA, i, uint64(m.Uint32))
	}
	if m.Uint64 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSimple(dAtA, i, uint64(m.Uint64))
	}
	if m.Sint32 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSimple(dAtA, i, uint64((uint32(m.Sint32)<<1)^uint32((m.Sint32>>31))))
	}
	if m.Sint64 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSimple(dAtA, i, uint64((uint64(m.Sint64)<<1)^uint64((m.Sint64>>63))))
	}
	if m.Fixed32 != 0 {
		dAtA[i] = 0x4d
		i++
		i = encodeFixed32Simple(dAtA, i, uint32(m.Fixed32))
	}
	if m.Fixed64 != 0 {
		dAtA[i] = 0x51
		i++
		i = encodeFixed64Simple(dAtA, i, uint64(m.Fixed64))
	}
	if m.Sfixed32 != 0 {
		dAtA[i] = 0x5d
		i++
		i = encodeFixed32Simple(dAtA, i, uint32(m.Sfixed32))
	}
	if m.Sfixed64 != 0 {
		dAtA[i] = 0x61
		i++
		i = encodeFixed64Simple(dAtA, i, uint64(m.Sfixed64))
	}
	if m.Bool {
		dAtA[i] = 0x68
		i++
		if m.Bool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.String_) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSimple(dAtA, i, uint64(len(m.String_)))
		i += copy(dAtA[i:], m.String_)
	}
	if len(m.Bytes) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSimple(dAtA, i, uint64(len(m.Bytes)))
		i += copy(dAtA[i:], m.Bytes)
	}
	if len(m.RepeatedInt64Packed) > 0 {
		dAtA2 := make([]byte, len(m.RepeatedInt64Packed)*10)
		var j1 int
		for _, num1 := range m.RepeatedInt64Packed {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSimple(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func encodeFixed64Simple(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Simple(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSimple(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Simple) Size() (n int) {
	var l int
	_ = l
	if m.Double != 0 {
		n += 9
	}
	if m.Float != 0 {
		n += 5
	}
	if m.Int32 != 0 {
		n += 1 + sovSimple(uint64(m.Int32))
	}
	if m.Int64 != 0 {
		n += 1 + sovSimple(uint64(m.Int64))
	}
	if m.Uint32 != 0 {
		n += 1 + sovSimple(uint64(m.Uint32))
	}
	if m.Uint64 != 0 {
		n += 1 + sovSimple(uint64(m.Uint64))
	}
	if m.Sint32 != 0 {
		n += 1 + sozSimple(uint64(m.Sint32))
	}
	if m.Sint64 != 0 {
		n += 1 + sozSimple(uint64(m.Sint64))
	}
	if m.Fixed32 != 0 {
		n += 5
	}
	if m.Fixed64 != 0 {
		n += 9
	}
	if m.Sfixed32 != 0 {
		n += 5
	}
	if m.Sfixed64 != 0 {
		n += 9
	}
	if m.Bool {
		n += 2
	}
	l = len(m.String_)
	if l > 0 {
		n += 1 + l + sovSimple(uint64(l))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovSimple(uint64(l))
	}
	if len(m.RepeatedInt64Packed) > 0 {
		l = 0
		for _, e := range m.RepeatedInt64Packed {
			l += sovSimple(uint64(e))
		}
		n += 2 + sovSimple(uint64(l)) + l
	}
	return n
}

func sovSimple(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSimple(x uint64) (n int) {
	return sovSimple(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Simple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimple
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Simple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Simple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Double", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Double = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Float = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			m.Int32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32", wireType)
			}
			m.Uint32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint32 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64", wireType)
			}
			m.Uint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Sint32 = v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Sint64 = int64(v)
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32", wireType)
			}
			m.Fixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Fixed32 = uint32(dAtA[iNdEx-4])
			m.Fixed32 |= uint32(dAtA[iNdEx-3]) << 8
			m.Fixed32 |= uint32(dAtA[iNdEx-2]) << 16
			m.Fixed32 |= uint32(dAtA[iNdEx-1]) << 24
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed64", wireType)
			}
			m.Fixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Fixed64 = uint64(dAtA[iNdEx-8])
			m.Fixed64 |= uint64(dAtA[iNdEx-7]) << 8
			m.Fixed64 |= uint64(dAtA[iNdEx-6]) << 16
			m.Fixed64 |= uint64(dAtA[iNdEx-5]) << 24
			m.Fixed64 |= uint64(dAtA[iNdEx-4]) << 32
			m.Fixed64 |= uint64(dAtA[iNdEx-3]) << 40
			m.Fixed64 |= uint64(dAtA[iNdEx-2]) << 48
			m.Fixed64 |= uint64(dAtA[iNdEx-1]) << 56
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed32", wireType)
			}
			m.Sfixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Sfixed32 = int32(dAtA[iNdEx-4])
			m.Sfixed32 |= int32(dAtA[iNdEx-3]) << 8
			m.Sfixed32 |= int32(dAtA[iNdEx-2]) << 16
			m.Sfixed32 |= int32(dAtA[iNdEx-1]) << 24
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed64", wireType)
			}
			m.Sfixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Sfixed64 = int64(dAtA[iNdEx-8])
			m.Sfixed64 |= int64(dAtA[iNdEx-7]) << 8
			m.Sfixed64 |= int64(dAtA[iNdEx-6]) << 16
			m.Sfixed64 |= int64(dAtA[iNdEx-5]) << 24
			m.Sfixed64 |= int64(dAtA[iNdEx-4]) << 32
			m.Sfixed64 |= int64(dAtA[iNdEx-3]) << 40
			m.Sfixed64 |= int64(dAtA[iNdEx-2]) << 48
			m.Sfixed64 |= int64(dAtA[iNdEx-1]) << 56
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bool = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimple
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSimple
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSimple
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RepeatedInt64Packed = append(m.RepeatedInt64Packed, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSimple
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSimple
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSimple
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RepeatedInt64Packed = append(m.RepeatedInt64Packed, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedInt64Packed", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSimple(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimple
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSimple(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSimple
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimple
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimple
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSimple
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSimple
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSimple(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSimple = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSimple   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("simple.proto", fileDescriptorSimple) }

var fileDescriptorSimple = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0xd1, 0x3f, 0x4e, 0xeb, 0x40,
	0x10, 0x06, 0xf0, 0x37, 0x71, 0xe2, 0x24, 0xfb, 0x12, 0x12, 0x96, 0x3f, 0x1a, 0x51, 0x58, 0x23,
	0xaa, 0xa9, 0x28, 0x12, 0xcb, 0x07, 0x48, 0x47, 0x87, 0x86, 0x8e, 0x26, 0x8a, 0xf1, 0x06, 0x59,
	0x98, 0xd8, 0x8a, 0x1d, 0x09, 0x6e, 0xc2, 0x11, 0x38, 0x0a, 0x25, 0x47, 0x40, 0xe1, 0x22, 0xc8,
	0xde, 0xb5, 0xe9, 0xf6, 0xf7, 0x7d, 0x63, 0x6b, 0xb5, 0xa3, 0x26, 0x65, 0xfa, 0x52, 0x64, 0xe6,
	0xa6, 0xd8, 0xe7, 0x55, 0xae, 0x7d, 0xab, 0xeb, 0x0f, 0x4f, 0xf9, 0xf7, 0xcd, 0x51, 0x5f, 0x2a,
	0x3f, 0xc9, 0x0f, 0x71, 0x66, 0x10, 0x08, 0x18, 0xc4, 0x49, 0x9f, 0xab, 0xc1, 0x36, 0xcb, 0x37,
	0x15, 0xf6, 0x08, 0xb8, 0x27, 0x16, 0x75, 0x9a, 0xee, 0xaa, 0xe5, 0x02, 0x3d, 0x02, 0x1e, 0x88,
	0x85, 0x4b, 0xa3, 0x10, 0xfb, 0x04, 0xec, 0x89, 0x45, 0xfd, 0xe7, 0x83, 0x1d, 0x1e, 0x10, 0xf0,
	0x54, 0x9c, 0xda, 0x3c, 0x0a, 0xd1, 0x27, 0xe0, 0xbe, 0x38, 0xd5, 0x79, 0x69, 0xe7, 0x87, 0x04,
	0x7c, 0x2a, 0x4e, 0x6d, 0x1e, 0x85, 0x38, 0x22, 0x60, 0x2d, 0x4e, 0x1a, 0xd5, 0x70, 0x9b, 0xbe,
	0x9a, 0x64, 0xb9, 0xc0, 0x31, 0x01, 0x0f, 0xa5, 0x65, 0xd7, 0x44, 0x21, 0x2a, 0x02, 0xf6, 0xa5,
	0xa5, 0xbe, 0x52, 0xa3, 0xb2, 0xfd, 0xe8, 0x3f, 0x01, 0xcf, 0xa4, 0xf3, 0x5f, 0x17, 0x85, 0x38,
	0x21, 0xe0, 0xb9, 0x74, 0xd6, 0x5a, 0xf5, 0xe3, 0x3c, 0xcf, 0x70, 0x4a, 0xc0, 0x23, 0x69, 0xce,
	0xcd, 0xbd, 0xaa, 0x7d, 0xba, 0x7b, 0xc2, 0x13, 0x02, 0x1e, 0x8b, 0x53, 0xfd, 0x1a, 0xf1, 0x5b,
	0x65, 0x4a, 0x9c, 0x11, 0xf0, 0x44, 0x2c, 0x74, 0xa4, 0x2e, 0xf6, 0xa6, 0x30, 0x9b, 0xca, 0x24,
	0xeb, 0xe6, 0xfe, 0xeb, 0x62, 0xf3, 0xf8, 0x6c, 0x12, 0x9c, 0x93, 0xc7, 0xde, 0xaa, 0x37, 0x07,
	0x39, 0x6b, 0x07, 0x6e, 0xeb, 0xfe, 0xae, 0xa9, 0x57, 0xf8, 0x79, 0x0c, 0xe0, 0xeb, 0x18, 0xc0,
	0xf7, 0x31, 0x80, 0xf7, 0x9f, 0xe0, 0xdf, 0x83, 0x5b, 0x62, 0xec, 0x37, 0x3b, 0x5d, 0xfe, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x81, 0xf4, 0xab, 0xd0, 0xe3, 0x01, 0x00, 0x00,
}
