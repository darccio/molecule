// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream_test.proto

package molecule

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type XmasTree_Enu int32

const (
	XmasTree_e0 XmasTree_Enu = 0
	XmasTree_e2 XmasTree_Enu = 2
)

var XmasTree_Enu_name = map[int32]string{
	0: "e0",
	2: "e2",
}

var XmasTree_Enu_value = map[string]int32{
	"e0": 0,
	"e2": 2,
}

func (x XmasTree_Enu) String() string {
	return proto.EnumName(XmasTree_Enu_name, int32(x))
}

func (XmasTree_Enu) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2, 0}
}

type SearchRequest struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	PageNumber           int32    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	ResultPerPage        int32    `protobuf:"varint,3,opt,name=result_per_page,json=resultPerPage,proto3" json:"result_per_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchRequest) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *SearchRequest) GetResultPerPage() int32 {
	if m != nil {
		return m.ResultPerPage
	}
	return 0
}

type MultiSearch struct {
	ApiKey               string           `protobuf:"bytes,10,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Request              []*SearchRequest `protobuf:"bytes,11,rep,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MultiSearch) Reset()         { *m = MultiSearch{} }
func (m *MultiSearch) String() string { return proto.CompactTextString(m) }
func (*MultiSearch) ProtoMessage()    {}
func (*MultiSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *MultiSearch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiSearch.Unmarshal(m, b)
}
func (m *MultiSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiSearch.Marshal(b, m, deterministic)
}
func (m *MultiSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSearch.Merge(m, src)
}
func (m *MultiSearch) XXX_Size() int {
	return xxx_messageInfo_MultiSearch.Size(m)
}
func (m *MultiSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSearch.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSearch proto.InternalMessageInfo

func (m *MultiSearch) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *MultiSearch) GetRequest() []*SearchRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// A message with every scalar type in it
type XmasTree struct {
	Dub                  float64      `protobuf:"fixed64,1,opt,name=dub,proto3" json:"dub,omitempty"`
	Flo                  float32      `protobuf:"fixed32,2,opt,name=flo,proto3" json:"flo,omitempty"`
	I32                  int32        `protobuf:"varint,3,opt,name=i32,proto3" json:"i32,omitempty"`
	I64                  int64        `protobuf:"varint,4,opt,name=i64,proto3" json:"i64,omitempty"`
	U32                  uint32       `protobuf:"varint,5,opt,name=u32,proto3" json:"u32,omitempty"`
	U64                  uint64       `protobuf:"varint,6,opt,name=u64,proto3" json:"u64,omitempty"`
	S32                  int32        `protobuf:"zigzag32,7,opt,name=s32,proto3" json:"s32,omitempty"`
	S64                  int64        `protobuf:"zigzag64,8,opt,name=s64,proto3" json:"s64,omitempty"`
	F32                  uint32       `protobuf:"fixed32,9,opt,name=f32,proto3" json:"f32,omitempty"`
	F64                  uint64       `protobuf:"fixed64,10,opt,name=f64,proto3" json:"f64,omitempty"`
	Sf32                 int32        `protobuf:"fixed32,11,opt,name=sf32,proto3" json:"sf32,omitempty"`
	Sf64                 int64        `protobuf:"fixed64,12,opt,name=sf64,proto3" json:"sf64,omitempty"`
	Boo                  bool         `protobuf:"varint,13,opt,name=boo,proto3" json:"boo,omitempty"`
	Str                  string       `protobuf:"bytes,14,opt,name=str,proto3" json:"str,omitempty"`
	Byt                  []byte       `protobuf:"bytes,15,opt,name=byt,proto3" json:"byt,omitempty"`
	Enu                  XmasTree_Enu `protobuf:"varint,16,opt,name=enu,proto3,enum=XmasTree_Enu" json:"enu,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *XmasTree) Reset()         { *m = XmasTree{} }
func (m *XmasTree) String() string { return proto.CompactTextString(m) }
func (*XmasTree) ProtoMessage()    {}
func (*XmasTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2}
}

func (m *XmasTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XmasTree.Unmarshal(m, b)
}
func (m *XmasTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XmasTree.Marshal(b, m, deterministic)
}
func (m *XmasTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XmasTree.Merge(m, src)
}
func (m *XmasTree) XXX_Size() int {
	return xxx_messageInfo_XmasTree.Size(m)
}
func (m *XmasTree) XXX_DiscardUnknown() {
	xxx_messageInfo_XmasTree.DiscardUnknown(m)
}

var xxx_messageInfo_XmasTree proto.InternalMessageInfo

func (m *XmasTree) GetDub() float64 {
	if m != nil {
		return m.Dub
	}
	return 0
}

func (m *XmasTree) GetFlo() float32 {
	if m != nil {
		return m.Flo
	}
	return 0
}

func (m *XmasTree) GetI32() int32 {
	if m != nil {
		return m.I32
	}
	return 0
}

func (m *XmasTree) GetI64() int64 {
	if m != nil {
		return m.I64
	}
	return 0
}

func (m *XmasTree) GetU32() uint32 {
	if m != nil {
		return m.U32
	}
	return 0
}

func (m *XmasTree) GetU64() uint64 {
	if m != nil {
		return m.U64
	}
	return 0
}

func (m *XmasTree) GetS32() int32 {
	if m != nil {
		return m.S32
	}
	return 0
}

func (m *XmasTree) GetS64() int64 {
	if m != nil {
		return m.S64
	}
	return 0
}

func (m *XmasTree) GetF32() uint32 {
	if m != nil {
		return m.F32
	}
	return 0
}

func (m *XmasTree) GetF64() uint64 {
	if m != nil {
		return m.F64
	}
	return 0
}

func (m *XmasTree) GetSf32() int32 {
	if m != nil {
		return m.Sf32
	}
	return 0
}

func (m *XmasTree) GetSf64() int64 {
	if m != nil {
		return m.Sf64
	}
	return 0
}

func (m *XmasTree) GetBoo() bool {
	if m != nil {
		return m.Boo
	}
	return false
}

func (m *XmasTree) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *XmasTree) GetByt() []byte {
	if m != nil {
		return m.Byt
	}
	return nil
}

func (m *XmasTree) GetEnu() XmasTree_Enu {
	if m != nil {
		return m.Enu
	}
	return XmasTree_e0
}

func init() {
	proto.RegisterEnum("XmasTree_Enu", XmasTree_Enu_name, XmasTree_Enu_value)
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*MultiSearch)(nil), "MultiSearch")
	proto.RegisterType((*XmasTree)(nil), "XmasTree")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xc1, 0x8e, 0x9b, 0x30,
	0x10, 0x86, 0x6b, 0x48, 0x48, 0xd6, 0x2c, 0x09, 0xb5, 0x5a, 0xd5, 0xb7, 0xb5, 0x72, 0xa8, 0x7c,
	0x29, 0xb4, 0x80, 0x78, 0x80, 0x6a, 0xf7, 0x54, 0xb5, 0x8a, 0xdc, 0x1e, 0xaa, 0x5e, 0x22, 0xb3,
	0x71, 0x59, 0xb4, 0x09, 0xb0, 0xc6, 0x3e, 0xe4, 0x3d, 0xfb, 0x40, 0xd5, 0x0c, 0xcd, 0xa1, 0x27,
	0x3e, 0x7f, 0x33, 0xe8, 0xff, 0xb1, 0xa0, 0xd4, 0x99, 0xc9, 0x65, 0xa3, 0x1d, 0xdc, 0xb0, 0xeb,
	0x69, 0xf2, 0xdd, 0x68, 0xfb, 0xf8, 0xa4, 0xcc, 0x8b, 0x37, 0x93, 0x63, 0x6f, 0xe8, 0xf2, 0xc5,
	0x1b, 0x7b, 0xe1, 0x44, 0x10, 0x79, 0xa3, 0xe6, 0x03, 0xbb, 0xa3, 0xf1, 0xa8, 0x5b, 0x73, 0xe8,
	0xfd, 0xb9, 0x31, 0x96, 0x07, 0x82, 0xc8, 0xa5, 0xa2, 0xa0, 0xbe, 0xa1, 0x61, 0xef, 0xe9, 0xd6,
	0x9a, 0xc9, 0x9f, 0xdc, 0x61, 0x34, 0xf6, 0x00, 0x03, 0x1e, 0xe2, 0x52, 0x32, 0xeb, 0xbd, 0xb1,
	0x7b, 0xdd, 0x9a, 0xdd, 0x9e, 0xc6, 0x5f, 0xfd, 0xc9, 0x75, 0x73, 0x28, 0x7b, 0x47, 0x57, 0x7a,
	0xec, 0x0e, 0xcf, 0xe6, 0xc2, 0x29, 0xe6, 0x45, 0x7a, 0xec, 0xbe, 0x98, 0x0b, 0x93, 0x74, 0x65,
	0xe7, 0x46, 0x3c, 0x16, 0xa1, 0x8c, 0x8b, 0x4d, 0xf6, 0x5f, 0x4f, 0x75, 0x1d, 0xef, 0xfe, 0x04,
	0x74, 0xfd, 0xf3, 0xac, 0xa7, 0x1f, 0xd6, 0x18, 0x96, 0xd2, 0xf0, 0xe8, 0x1b, 0xec, 0x4e, 0x14,
	0x20, 0x98, 0xdf, 0xa7, 0x01, 0x1b, 0x07, 0x0a, 0x10, 0x4c, 0x57, 0x16, 0xff, 0xea, 0x01, 0xa2,
	0xa9, 0x2b, 0xbe, 0x10, 0x44, 0x86, 0x0a, 0x10, 0x8c, 0x2f, 0x0b, 0xbe, 0x14, 0x44, 0x26, 0x0a,
	0x10, 0x4d, 0x5d, 0xf1, 0x48, 0x10, 0xb9, 0x50, 0x80, 0x60, 0xa6, 0xb2, 0xe0, 0x2b, 0x41, 0xe4,
	0x6b, 0x05, 0x88, 0xa6, 0xae, 0xf8, 0x5a, 0x10, 0xc9, 0x14, 0x20, 0xa6, 0x97, 0x05, 0xbf, 0x11,
	0x44, 0xae, 0x14, 0x20, 0x9a, 0xba, 0xc2, 0xaf, 0x8d, 0x14, 0x20, 0x63, 0x74, 0x31, 0xc1, 0x52,
	0x2c, 0x88, 0xdc, 0x2a, 0xe4, 0xd9, 0xd5, 0x15, 0xbf, 0x15, 0x44, 0xa6, 0x0a, 0x19, 0xde, 0x6c,
	0x86, 0x81, 0x27, 0x82, 0xc8, 0xb5, 0x02, 0xc4, 0x3c, 0x67, 0xf9, 0x06, 0x6f, 0x0e, 0x10, 0x77,
	0x2e, 0x8e, 0x6f, 0x05, 0x91, 0xb7, 0x0a, 0x90, 0xdd, 0xd1, 0xd0, 0xf4, 0x9e, 0xa7, 0x82, 0xc8,
	0x4d, 0x91, 0x64, 0xd7, 0x9b, 0xca, 0x1e, 0x7a, 0xaf, 0x60, 0xb2, 0x7b, 0x4b, 0xc3, 0x87, 0xde,
	0xb3, 0x88, 0x06, 0xe6, 0x63, 0xfa, 0x0a, 0x9f, 0x45, 0x1a, 0x7c, 0x2e, 0x7f, 0x7d, 0x6a, 0x3b,
	0xf7, 0xe4, 0x9b, 0xec, 0x71, 0x38, 0xe7, 0xf7, 0xda, 0xe9, 0xfb, 0xa1, 0xcd, 0x8f, 0xda, 0xe9,
	0xe3, 0xd0, 0x7e, 0xd0, 0xad, 0xe9, 0x5d, 0x3e, 0x3e, 0xb7, 0x39, 0xfe, 0x46, 0xf9, 0xe4, 0xac,
	0xd1, 0xe7, 0x26, 0xc2, 0x53, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xe1, 0x8b, 0xf4, 0x62,
	0x02, 0x00, 0x00,
}
